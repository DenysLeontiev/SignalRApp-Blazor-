@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@implements IAsyncDisposable

<div class="form-group">
	<label >
		Username: <input @bind="userInput" />
	</label>
</div>


<div class="form-group">
	<label>
		Message: <input @bind="messageInput" />
	</label>
</div>

<button onclick="@Send" disabled="@(IsConnected == false)">Send Message</button>

<hr />
<ol>
	@foreach (var message in messages)
	{
		<li>@message</li>
	}
</ol>

@code {
	private HubConnection? hubConnection;
	private List<string>? messages = new();
	private string? userInput;
	private string? messageInput;

	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder().WithUrl(NavManager.ToAbsoluteUri("/chathub"))
														.WithAutomaticReconnect()
														.Build();

		hubConnection.On<string, string>("ReceiveMessage", (user, message) => // here we listen to that event,which is triggered form Server-Side every time we send a message
		{
			var formattedMessage = $"{user} : {message}";
			messages?.Add(formattedMessage);
			InvokeAsync(StateHasChanged); // notify our blazor page,that state has been changed(so,this page will be re-rendered)
		});

		await hubConnection.StartAsync(); // start the connection
	}

	private async Task Send()
	{ 
		if(hubConnection is not null)
		{
			await hubConnection.SendAsync("SendMessage", userInput, messageInput); // send the userName and message from inputs to the server
		}
	}

	private bool IsConnected
	{
		get
		{
			return hubConnection?.State == HubConnectionState.Connected; // true, if hubConnection`s state is true
		}
	}

	public async ValueTask DisposeAsync() // here, we are disposing hubConnection in order to free some resources
	{
		if(hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}